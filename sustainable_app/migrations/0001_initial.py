# Generated by Django 4.1.5 on 2023-03-14 15:26

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import sustainable_app.models.location


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('xp', models.IntegerField(default=0)),
                ('points', models.IntegerField(default=0)),
                ('game_keeper', models.BooleanField(default=False)),
                ('weekly_xp', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DailyData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=datetime.date.today)),
            ],
        ),
        migrations.CreateModel(
            name='Goal',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(max_length=400)),
                ('active', models.BooleanField(default=False)),
                ('url', models.CharField(max_length=200)),
                ('image', models.CharField(max_length=200)),
                ('type', models.CharField(choices=[('minigame', 'Minigame'), ('location', 'Location'), ('poll', 'Poll'), ('personal', 'Personal')], max_length=8)),
                ('point_reward', models.IntegerField(default=0)),
                ('xp_reward', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=200)),
                ('name', models.CharField(max_length=200)),
                ('cost', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('on_sale', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('question', models.TextField()),
                ('a1', models.CharField(max_length=255)),
                ('a2', models.CharField(max_length=255)),
                ('a3', models.CharField(max_length=255)),
                ('a4', models.CharField(max_length=255)),
                ('correct_answer', models.IntegerField(choices=[(1, 'a1'), (2, 'a2'), (3, 'a3'), (4, 'a4')])),
            ],
        ),
        migrations.CreateModel(
            name='PersonalGoalStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('completed', models.BooleanField(default=False)),
                ('goal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sustainable_app.goal')),
                ('user_data', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sustainable_app.dailydata')),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('category', models.CharField(choices=[('recycle', 'Recycling Bin'), ('water', 'Water Fountain')], max_length=7)),
                ('clue', models.CharField(max_length=200)),
                ('image', models.ImageField(upload_to=sustainable_app.models.location.Location.path_and_rename)),
                ('qr', models.ImageField(upload_to='location_qr')),
                ('goal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sustainable_app.goal')),
            ],
        ),
        migrations.CreateModel(
            name='DailyGoalStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('completed', models.BooleanField(default=False)),
                ('score', models.IntegerField(default=0)),
                ('goal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sustainable_app.goal')),
                ('user_data', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sustainable_app.dailydata')),
            ],
        ),
        migrations.AddField(
            model_name='dailydata',
            name='daily_goals',
            field=models.ManyToManyField(related_name='daily_goals', through='sustainable_app.DailyGoalStatus', to='sustainable_app.goal'),
        ),
        migrations.AddField(
            model_name='dailydata',
            name='personal_goals',
            field=models.ManyToManyField(related_name='personal_goals', through='sustainable_app.PersonalGoalStatus', to='sustainable_app.goal'),
        ),
        migrations.AddField(
            model_name='dailydata',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='equipped_items',
            field=models.ManyToManyField(related_name='equipped_by', to='sustainable_app.item'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='owned_items',
            field=models.ManyToManyField(related_name='owned_by', to='sustainable_app.item'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
